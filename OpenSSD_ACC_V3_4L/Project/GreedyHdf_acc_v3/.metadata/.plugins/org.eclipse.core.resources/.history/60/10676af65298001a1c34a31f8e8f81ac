//////////////////////////////////////////////////////////////////////////////////
// nvme_main.c for Cosmos+ OpenSSD
// Copyright (c) 2016 Hanyang University ENC Lab.
// Contributed by Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//				  Youngjin Jo <yjjo@enc.hanyang.ac.kr>
//				  Sangjin Lee <sjlee@enc.hanyang.ac.kr>
//				  Jaewook Kwak <jwkwak@enc.hanyang.ac.kr>
//				  Kibin Park <kbpark@enc.hanyang.ac.kr>
//
// This file is part of Cosmos+ OpenSSD.
//
// Cosmos+ OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos+ OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos+ OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>.
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Sangjin Lee <sjlee@enc.hanyang.ac.kr>
//			 Jaewook Kwak <jwkwak@enc.hanyang.ac.kr>
//			 Kibin Park <kbpark@enc.hanyang.ac.kr>
//
// Project Name: Cosmos+ OpenSSD
// Design Name: Cosmos+ Firmware
// Module Name: NVMe Main
// File Name: nvme_main.c
//
// Version: v1.2.0
//
// Description:
//   - initializes FTL and NAND
//   - handles NVMe controller
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.2.0
//   - header file for buffer is changed from "ia_lru_buffer.h" to "lru_buffer.h"
//   - Low level scheduler execution is allowed when there is no i/o command
//
// * v1.1.0
//   - DMA status initialization is added
//
// * v1.0.0
//   - First draft
//////////////////////////////////////////////////////////////////////////////////
#include "xil_printf.h"
#include "debug.h"
#include "io_access.h"

#include "nvme.h"
#include "host_lld.h"
#include "nvme_main.h"
#include "nvme_admin_cmd.h"
#include "nvme_io_cmd.h"

#include "../memory_map.h"
#include "xuartps_hw.h"

volatile NVME_CONTEXT g_nvmeTask;

extern u32 *configACC, *parameterACC1,*parameterACC2,*parameterACC3,*parameterACC4,
			*parameterACC5,*parameterACC6,*parameterACC7,*parameterACC8,
			*parameterACCa,*parameterACCb,*parameterACCc,*parameterACCd;

uint8_t out[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
                        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
                        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
                        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
uint8_t rev_out[64];
//REVERSE FUNCTION
unsigned char reverse(unsigned char b)
{
b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
return b;
}

void nvme_main()
{

	unsigned int exeLlr,i,j,k;
	char c = 0;
	xil_printf("!!! Wait until FTL reset complete !!! \r\n");

	InitFTL();

	for(k=0;k<64;k++)
	{
		rev_out[k]= reverse(out[k]);
	}
	xil_printf("\r\n Test output vector reversed \r\n");
	xil_printf("\r\nFTL reset complete!!! \r\n");
	xil_printf("Turn on the host PC \r\n");

	while(1)
	{

		exeLlr = 1;
		if(g_nvmeTask.status == NVME_TASK_WAIT_CC_EN)
		{
			unsigned int ccEn;
			ccEn = check_nvme_cc_en();
			if(ccEn == 1)
			{
				set_nvme_admin_queue(1, 1, 1);
				set_nvme_csts_rdy(1);
				g_nvmeTask.status = NVME_TASK_RUNNING;
				xil_printf("\r\nNVMe ready!!!\r\n");
			}
		}
		else if(g_nvmeTask.status == NVME_TASK_RUNNING)
		{
			NVME_COMMAND nvmeCmd;
			unsigned int cmdValid;
			cmdValid = get_nvme_cmd(&nvmeCmd.qID, &nvmeCmd.cmdSlotTag, &nvmeCmd.cmdSeqNum, nvmeCmd.cmdDword);

			if(cmdValid == 1)
			{
				if(nvmeCmd.qID == 0)
				{
//					xil_printf("\r\n handle_nvme_admin_cmd \r\n");
					handle_nvme_admin_cmd(&nvmeCmd);
				}
				else
				{
//					xil_printf("\r\n handle_nvme_io_cmd \r\n");
					handle_nvme_io_cmd(&nvmeCmd);
					ReqTransSliceToLowLevel();
					exeLlr=0;
				}
			}
//			aggiunta per write e read da keyboard
			if(XUartPs_IsReceiveData(STDIN_BASEADDRESS))
			{
				c = XUartPs_ReadReg(STDIN_BASEADDRESS, XUARTPS_FIFO_OFFSET);
				switch(c)
				{
				//shift di 64 per tutte le operazioni (indirizzo base = 0x40h)
					case 'p': //read dei counter delle fifo/funzioni
					{
						xil_printf("\r\n freeReqQ headReq: %X; tailReq: %X; reqCnt: %d \r\n",freeReqQ.headReq,freeReqQ.tailReq,freeReqQ.reqCnt);
						xil_printf("\r\n sliceReqQ headReq: %X; tailReq: %X; reqCnt: %d \r\n",sliceReqQ.headReq,sliceReqQ.tailReq,sliceReqQ.reqCnt);
						xil_printf("\r\n nvmeDmaReqQ headReq: %X; tailReq: %X; reqCnt: %d \r\n",nvmeDmaReqQ.headReq,nvmeDmaReqQ.tailReq,nvmeDmaReqQ.reqCnt);
						xil_printf("\r\n blockedByBufDepReqQ headReq: %X; tailReq: %X; reqCnt: %d \r\n",blockedByBufDepReqQ.headReq,blockedByBufDepReqQ.tailReq,blockedByBufDepReqQ.reqCnt);
						xil_printf("\r\n nandReqQ[0][0] headReq: %X; tailReq: %X; reqCnt: %d \r\n",nandReqQ[0][0].headReq,nandReqQ[0][0].tailReq,nandReqQ[0][0].reqCnt);
						xil_printf("\r\n blockedByRowAddrDepReqQ[0][0] headReq: %X; tailReq: %X; reqCnt: %d \r\n",blockedByRowAddrDepReqQ[0][0].headReq,blockedByRowAddrDepReqQ[0][0].tailReq,blockedByRowAddrDepReqQ[0][0].reqCnt);
					}
					case 'b': //read accelerator registers - 128bit
					{
						xil_printf("CONFIGURATION: %X; KEY 128bit: %02x-%02x-%02x-%02x; IV: %02x-%02x-%02x-%02x \r\n",
								*configACC,*parameterACC4,*parameterACC3,*parameterACC2,*parameterACC1,*parameterACCd,
								*parameterACCc,*parameterACCb,*parameterACCa);
						break;
					}
					case 'n': //read accelerator registers - 256bit
					{
						xil_printf("CONFIGURATION: %X; KEY 256bit: %02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x; IV: %02x-%02x-%02x-%02x \r\n",
								*configACC,*parameterACC8,*parameterACC7,*parameterACC6,*parameterACC5,*parameterACC4,*parameterACC3,*parameterACC2,*parameterACC1,*parameterACCd,
								*parameterACCc,*parameterACCb,*parameterACCa);
						break;
					}
					case 'm':
					{
						int i,diff;
						int j=0;
						for(i=0;i<64;i++)
						{
							diff = MemSpace[BYTES_PER_NAND_ROW+i] - rev_out[i];	//the host writes at row 1
							if (diff!=0)
							{
								j++;
								xil_printf("Difference[%d]= %x,MemSpace[%d]:%002x,rev_out[%d]:%002x \r\n",i,diff,BYTES_PER_NAND_ROW+i,MemSpace[BYTES_PER_NAND_ROW+i],i,rev_out[i]);
							}
						}
						if(j==0)
						{
							xil_printf("Encryption completed successfully \r\n");
						}
						break;
					}
					case 'l':	//print of the 16kB
					{
						for(i=0;i<4;i++)
						{
							for(j=0;j<16;j++)
							{
								xil_printf("Mem[%d]:%002x -",BYTES_PER_NAND_ROW+(i*16)+j,MemSpace[BYTES_PER_NAND_ROW+(i*16)+j]);
							}
							xil_printf("\r\n");
						}
						break;
					}
					default:
						break;
				}
			}
		}
		else if(g_nvmeTask.status == NVME_TASK_SHUTDOWN)
		{
			NVME_STATUS_REG nvmeReg;
			nvmeReg.dword = IO_READ32(NVME_STATUS_REG_ADDR);
			if(nvmeReg.ccShn != 0)
			{
				unsigned int qID;
				set_nvme_csts_shst(1);

				for(qID = 0; qID < 8; qID++)
				{
					set_io_cq(qID, 0, 0, 0, 0, 0, 0);
					set_io_sq(qID, 0, 0, 0, 0, 0);
				}

				set_nvme_admin_queue(0, 0, 0);
				g_nvmeTask.cacheEn = 0;
				set_nvme_csts_shst(2);
				g_nvmeTask.status = NVME_TASK_WAIT_RESET;

				//flush grown bad block info
				UpdateBadBlockTableForGrownBadBlock(RESERVED_DATA_BUFFER_BASE_ADDR);

				xil_printf("\r\nNVMe shutdown!!!\r\n");
			}
		}
		else if(g_nvmeTask.status == NVME_TASK_WAIT_RESET)
		{
			unsigned int ccEn;
			ccEn = check_nvme_cc_en();
			if(ccEn == 0)
			{
				g_nvmeTask.cacheEn = 0;
				set_nvme_csts_shst(0);
				set_nvme_csts_rdy(0);
				g_nvmeTask.status = NVME_TASK_IDLE;
				xil_printf("\r\nNVMe disable!!!\r\n");
			}
		}
		else if(g_nvmeTask.status == NVME_TASK_RESET)
		{
			unsigned int qID;
			for(qID = 0; qID < 8; qID++)
			{
				set_io_cq(qID, 0, 0, 0, 0, 0, 0);
				set_io_sq(qID, 0, 0, 0, 0, 0);
			}
			*configACC = 0x0;					//reset of the accelerator configuration (when turned on again, it is just fifo)
			g_nvmeTask.cacheEn = 0;
			set_nvme_admin_queue(0, 0, 0);
			set_nvme_csts_shst(0);
			set_nvme_csts_rdy(0);
			g_nvmeTask.status = NVME_TASK_IDLE;

			xil_printf("\r\nNVMe reset!!!\r\n");
		}

		if(exeLlr && ((nvmeDmaReqQ.headReq != REQ_SLOT_TAG_NONE) || notCompletedNandReqCnt || blockedReqCnt))
		{
			CheckDoneNvmeDmaReq();
			SchedulingNandReq();
		}
	}
}


